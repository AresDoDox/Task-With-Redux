{"ast":null,"code":"var _jsxFileName = \"/Users/su/Documents/LuyntoLearn/task-management/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Alert, Container, Row, Col, Button } from 'reactstrap';\nimport randomstring from 'randomstring';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createSampleData = () => {\n      let tasks = [{\n        id: randomstring.generate(5),\n        namework: 'Học HTML',\n        status: true\n      }, {\n        id: randomstring.generate(5),\n        namework: 'Học CSS',\n        status: true\n      }, {\n        id: randomstring.generate(5),\n        namework: 'Học ReactJS Basic',\n        status: false\n      }];\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.onToggleForm = () => {\n      this.setState({\n        isDisplayForm: !this.state.isDisplayForm\n      });\n    };\n\n    this.onCloseForm = () => {\n      this.setState({\n        isDisplayForm: false\n      });\n    };\n\n    this.onSubmit = data => {\n      data.id = randomstring.generate(5);\n      let tasks = this.state.tasks;\n      tasks.push(data);\n      this.setState({\n        tasks: tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n\n    this.onUpdateStatus = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n      }\n\n      this.setState({\n        tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n\n    this.findIndex = id => {\n      var tasks = this.state.tasks;\n      let result = -1;\n      tasks.forEach((task, index) => {\n        if (task.id === id) {\n          return result = index;\n        }\n      });\n      return result;\n    };\n\n    this.state = {\n      tasks: [],\n      //id, namework, status \n      isDisplayForm: false\n    };\n  }\n\n  componentWillMount() {\n    if (localStorage && localStorage.getItem('tasks')) {\n      var tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      });\n    }\n  }\n\n  render() {\n    var _this$state = this.state,\n        tasks = _this$state.tasks,\n        isDisplayForm = _this$state.isDisplayForm;\n    let elementTaskForm = isDisplayForm ? React.createElement(TaskForm, {\n      onSubmit: this.onSubmit,\n      onCloseForm: this.onCloseForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }) : '';\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Qu\\u1EA3n l\\xFD c\\xF4ng vi\\u1EC7c\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: isDisplayForm ? \"4\" : \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, elementTaskForm), React.createElement(Col, {\n      md: isDisplayForm ? \"8\" : \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: \"12\",\n      className: \"p-0 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Th\\xEAm c\\xF4ng vi\\u1EC7c\"), ' ', React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.createSampleData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"T\\u1EA1o d\\u1EEF li\\u1EC7u m\\u1EABu\"), ' '), React.createElement(Control, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      tasks: tasks,\n      onToggleForm: this.onToggleForm,\n      onUpdateStatus: this.onUpdateStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-management/src/App.js"],"names":["React","Component","Alert","Container","Row","Col","Button","randomstring","TaskForm","Control","TaskList","App","constructor","props","createSampleData","tasks","id","generate","namework","status","localStorage","setItem","JSON","stringify","setState","onToggleForm","isDisplayForm","state","onCloseForm","onSubmit","data","push","onUpdateStatus","index","findIndex","result","forEach","task","componentWillMount","getItem","parse","render","elementTaskForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Alert, Container, Row, Col, Button\n} from 'reactstrap';\nimport randomstring from 'randomstring';\n\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [], //id, namework, status \n      isDisplayForm: false \n    }\n  }\n  componentWillMount() {\n    if(localStorage && localStorage.getItem('tasks')){\n      var tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      });\n    }\n  }\n\n  createSampleData = () => {\n    let tasks = [\n      {\n        id: randomstring.generate(5),\n        namework: 'Học HTML',\n        status: true\n      },\n      {\n        id: randomstring.generate(5),\n        namework: 'Học CSS',\n        status: true\n      },\n      {\n        id: randomstring.generate(5),\n        namework: 'Học ReactJS Basic',\n        status: false\n      }\n    ];\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    this.setState({\n      tasks: tasks\n    });\n  }\n\n  onToggleForm  = () => {\n    this.setState({\n      isDisplayForm: !this.state.isDisplayForm\n    });\n  }\n\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false\n    });\n  }\n\n  onSubmit = (data) => {\n    data.id = randomstring.generate(5);\n    let { tasks } = this.state;\n    tasks.push(data)\n    this.setState({\n      tasks: tasks\n    })\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n  onUpdateStatus = (id) => {\n    var { tasks } = this.state;\n    var index = this.findIndex(id);\n    if( index !== -1){\n      tasks[index].status = !tasks[index].status\n    }\n    this.setState({\n      tasks\n    });\n    localStorage.setItem('tasks',JSON.stringify(tasks));\n  }\n\n  findIndex = (id) => {\n    var { tasks } = this.state;\n    let result = -1;\n    tasks.forEach( (task,index) => {\n      if(task.id === id){\n        return result = index; \n      }\n    });\n    return result;\n  }\n\n  render() {\n    var { tasks, isDisplayForm } = this.state;\n    let elementTaskForm = isDisplayForm \n          ? <TaskForm  onSubmit={ this.onSubmit } onCloseForm={ this.onCloseForm }/> \n          : '';\n    return (\n      <div className=\"App\">\n        <Alert color=\"primary\">\n          <h1 className=\"title-app\">Quản lý công việc</h1>\n        </Alert>\n        <Container>\n          <Row>\n            <Col md={ isDisplayForm ? \"4\" : \"0\"}>\n              { elementTaskForm }\n            </Col>\n            <Col md={ isDisplayForm ? \"8\" : \"12\" }>\n              <Col md=\"12\" className=\"p-0 mb-2\">\n                <Button color=\"primary\" onClick={ this.onToggleForm }>Thêm công việc</Button>{' '}\n                <Button color=\"danger\" onClick={this.createSampleData}>Tạo dữ liệu mẫu</Button>{' '}\n              </Col>\n              <Control />\n              <TaskList \n                tasks={ tasks } \n                onToggleForm={this.onToggleForm}\n                onUpdateStatus = {this.onUpdateStatus}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}