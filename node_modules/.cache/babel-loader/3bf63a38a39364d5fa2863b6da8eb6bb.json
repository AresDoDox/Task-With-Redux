{"ast":null,"code":"var _jsxFileName = \"/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Alert, Container, Row, Col, Button } from 'reactstrap';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onToggleForm = () => {\n      if (this.props.task && this.props.task.id !== '') {\n        this.props.onOpenForm();\n      } else {\n        this.props.onToggleForm();\n      }\n\n      ;\n      this.props.onClearTask({\n        id: '',\n        name: '',\n        status: false\n      });\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      let status = parseInt(filterStatus, 10);\n      this.setState({\n        filter: {\n          filterName: filterName.toLowerCase(),\n          filterStatus: status\n        }\n      });\n    };\n\n    this.onSearch = keyword => {\n      if (keyword) {\n        this.setState({\n          keyword\n        });\n      }\n    };\n\n    this.onSoft = (softBy, softValue) => {\n      this.setState({\n        softBy: softBy,\n        softValue: softValue\n      });\n    };\n\n    this.state = {\n      filter: {\n        filterName: '',\n        filterStatus: -1\n      },\n      keyword: '',\n      softBy: 'name',\n      softValue: 1\n    };\n  } //Đóng/mở form\n\n\n  render() {\n    var _this$state = this.state,\n        softBy = _this$state.softBy,\n        softValue = _this$state.softValue;\n    var isDisplayForm = this.props.isDisplayForm; // if(filter && filter.filterName){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(filter.filterName) !== -1\n    //   });\n    // }\n    // tasks = tasks.filter(task => {\n    //     if(filter.filterStatus === -1 ){\n    //       return task\n    //     }else{\n    //       return task.status === (filter.filterStatus === 1 ? true : false)\n    //     }  \n    // });\n    // if(keyword){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(keyword) !== -1\n    //   });\n    // }\n    //Soft\n    // if(softBy === 'name'){\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.namework.toUpperCase(); // bỏ qua hoa thường\n    //     var nameB = b.namework.toUpperCase(); // bỏ qua hoa thường\n    //     if (nameA < nameB) {\n    //       return -softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }else{\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.status;\n    //     var nameB = b.status; \n    //     if (nameA < nameB) {\n    //       return softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return -softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Qu\\u1EA3n l\\xFD c\\xF4ng vi\\u1EC7c\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: isDisplayForm ? \"4\" : \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: isDisplayForm ? \"8\" : \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: \"12\",\n      className: \"p-0 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Th\\xEAm c\\xF4ng vi\\u1EC7c\")), React.createElement(Control, {\n      onSearch: this.onSearch,\n      onSoft: this.onSoft,\n      softBy: softBy,\n      softValue: softValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    task: state.task\n  };\n};\n\nlet mapDispatchToProps = (dispatch, action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    },\n    onClearTask: task => {\n      dispatch(actions.editTask(task));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js"],"names":["React","Component","Alert","Container","Row","Col","Button","TaskForm","Control","TaskList","connect","actions","App","constructor","props","onToggleForm","task","id","onOpenForm","onClearTask","name","status","onFilter","filterName","filterStatus","parseInt","setState","filter","toLowerCase","onSearch","keyword","onSoft","softBy","softValue","state","render","isDisplayForm","mapStateToProps","mapDispatchToProps","dispatch","action","toggleForm","openForm","editTask"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Alert, Container, Row, Col, Button\n} from 'reactstrap';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\n\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: {\n        filterName: '',\n        filterStatus: -1\n      },\n      keyword: '',\n      softBy: 'name',\n      softValue: 1\n    }\n  }\n\n  //Đóng/mở form\n  onToggleForm  = () => {\n    if(this.props.task && this.props.task.id !== ''){\n      this.props.onOpenForm();\n    }else{\n      this.props.onToggleForm();\n    };\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      status: false\n    });\n  }\n\n  //Filter\n  onFilter = (filterName, filterStatus) => {\n    let status = parseInt(filterStatus,10);\n    this.setState({\n      filter: {\n        filterName: filterName.toLowerCase(),\n        filterStatus : status\n      }\n    });\n  }\n  //Search\n  onSearch = (keyword) => {\n    if(keyword){\n      this.setState({\n        keyword\n      });\n    }\n\n  }\n  //Soft\n  onSoft = (softBy, softValue) => {\n    this.setState({\n          softBy: softBy,\n          softValue: softValue\n    });\n  }\n\n  render() {\n    var { \n      softBy, \n      softValue \n    } = this.state;\n\n    var { isDisplayForm } = this.props;\n    // if(filter && filter.filterName){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(filter.filterName) !== -1\n    //   });\n    // }\n\n    // tasks = tasks.filter(task => {\n    //     if(filter.filterStatus === -1 ){\n    //       return task\n    //     }else{\n    //       return task.status === (filter.filterStatus === 1 ? true : false)\n    //     }  \n    // });\n\n    // if(keyword){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(keyword) !== -1\n    //   });\n    // }\n    //Soft\n    // if(softBy === 'name'){\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.namework.toUpperCase(); // bỏ qua hoa thường\n    //     var nameB = b.namework.toUpperCase(); // bỏ qua hoa thường\n    //     if (nameA < nameB) {\n    //       return -softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }else{\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.status;\n    //     var nameB = b.status; \n    //     if (nameA < nameB) {\n    //       return softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return -softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }\n    return (\n      <div className=\"App\">\n        <Alert color=\"primary\">\n          <h1 className=\"title-app\">Quản lý công việc</h1>\n        </Alert>\n        <Container>\n          <Row>\n            <Col md={ isDisplayForm ? \"4\" : \"0\"}>\n              <TaskForm /> \n            </Col>\n            <Col md={ isDisplayForm ? \"8\" : \"12\" }>\n              <Col md=\"12\" className=\"p-0 mb-2\">\n                <Button color=\"primary\" onClick={ this.onToggleForm }>Thêm công việc</Button>\n              </Col>\n              <Control \n                onSearch={this.onSearch}\n                onSoft={this.onSoft}\n                softBy={softBy}\n                softValue={softValue}\n              />\n              <TaskList\n                onFilter = {this.onFilter}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    task: state.task\n  };\n};\n\nlet mapDispatchToProps = (dispatch,action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    },\n    onClearTask: (task) =>{\n      dispatch(actions.editTask(task));\n    }\n  };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}