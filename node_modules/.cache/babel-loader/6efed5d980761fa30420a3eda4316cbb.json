{"ast":null,"code":"import * as types from './../constants/ActionTypes';\nimport randomstring from 'randomstring';\nlet data = JSON.parse(localStorage.getItem('tasks')); //Khai báo giá trị mặc định\n\nlet initialState = data ? data : []; // Các hàm\n//---Tìm index\n\nlet findIndex = (tasks, id) => {\n  let result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      return result = index;\n    }\n  });\n  return result;\n}; //Khởi tạo reducer\n\n\nlet myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      // Thêm task mới vào data    \n      let newTask = {\n        id: randomstring.generate(5),\n        namework: action.task.namework,\n        status: action.task.statuswork\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      // console.log(action);\n      let id = action.id;\n      let index = findIndex(state, id);\n\n      if (index !== -1) {\n        state[index].status = !state[index].status;\n      }\n\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  } // return state;\n\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/reducers/tasks.js"],"names":["types","randomstring","data","JSON","parse","localStorage","getItem","initialState","findIndex","tasks","id","result","forEach","task","index","myReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","generate","namework","status","statuswork","push","setItem","stringify","UPDATE_STATUS_TASK"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX,C,CACA;;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC,C,CAEA;AACA;;AACA,IAAKM,SAAS,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAe;AAC5B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAe,CAACC,IAAD,EAAMC,KAAN,KAAgB;AAC7B,QAAGD,IAAI,CAACH,EAAL,KAAYA,EAAf,EAAkB;AAChB,aAAOC,MAAM,GAAGG,KAAhB;AACD;AACF,GAJD;AAKA,SAAOH,MAAP;AACH,CARD,C,CAWA;;;AACA,IAAII,SAAS,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,KAAK,CAACmB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKhB,KAAK,CAACoB,QAAX;AACI;AACA,UAAIC,OAAO,GAAG;AACVX,QAAAA,EAAE,EAAET,YAAY,CAACqB,QAAb,CAAsB,CAAtB,CADM;AAEVC,QAAAA,QAAQ,EAAEN,MAAM,CAACJ,IAAP,CAAYU,QAFZ;AAGVC,QAAAA,MAAM,EAAEP,MAAM,CAACJ,IAAP,CAAYY;AAHV,OAAd;AAKAT,MAAAA,KAAK,CAACU,IAAN,CAAWL,OAAX;AACAhB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,OAArB,EAA8BxB,IAAI,CAACyB,SAAL,CAAeZ,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKhB,KAAK,CAAC6B,kBAAX;AACI;AACA,UAAInB,EAAE,GAAGO,MAAM,CAACP,EAAhB;AACA,UAAII,KAAK,GAAGN,SAAS,CAACQ,KAAD,EAAQN,EAAR,CAArB;;AACA,UAAII,KAAK,KAAK,CAAC,CAAf,EAAiB;AACbE,QAAAA,KAAK,CAACF,KAAD,CAAL,CAAaU,MAAb,GAAsB,CAACR,KAAK,CAACF,KAAD,CAAL,CAAaU,MAApC;AACH;;AACDnB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,OAArB,EAA6BxB,IAAI,CAACyB,SAAL,CAAeZ,KAAf,CAA7B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ;AACI,aAAOA,KAAP;AAvBR,GAD8C,CA0B9C;;AACH,CA3BD;;AA6BA,eAAeD,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes';\nimport randomstring from 'randomstring';\n\nlet data = JSON.parse(localStorage.getItem('tasks'));\n//Khai báo giá trị mặc định\nlet initialState = data ? data : [];\n\n// Các hàm\n//---Tìm index\nlet  findIndex = (tasks, id) => {\n    let result = -1;\n    tasks.forEach( (task,index) => {\n      if(task.id === id){\n        return result = index; \n      }\n    });\n    return result;\n}\n\n\n//Khởi tạo reducer\nlet myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            // Thêm task mới vào data    \n            let newTask = {\n                id: randomstring.generate(5),\n                namework: action.task.namework,\n                status: action.task.statuswork \n            }\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS_TASK:\n            // console.log(action);\n            let id = action.id;\n            let index = findIndex(state, id);\n            if( index !== -1){\n                state[index].status = !state[index].status\n            }\n            localStorage.setItem('tasks',JSON.stringify(state));\n            return [...state];\n        default:\n            return state;\n    }\n    // return state;\n};\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}