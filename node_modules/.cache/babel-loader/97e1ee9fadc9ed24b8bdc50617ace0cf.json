{"ast":null,"code":"var _jsxFileName = \"/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Alert, Container, Row, Col, Button } from 'reactstrap';\nimport randomstring from 'randomstring';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createSampleData = () => {\n      let tasks = [{\n        id: randomstring.generate(5),\n        namework: 'Học HTML',\n        status: true\n      }, {\n        id: randomstring.generate(5),\n        namework: 'Học CSS',\n        status: true\n      }, {\n        id: randomstring.generate(5),\n        namework: 'Học ReactJS Basic',\n        status: false\n      }];\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.onToggleForm = () => {\n      this.props.onToggleForm();\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      let status = parseInt(filterStatus, 10);\n      this.setState({\n        filter: {\n          filterName: filterName.toLowerCase(),\n          filterStatus: status\n        }\n      });\n    };\n\n    this.onSearch = keyword => {\n      if (keyword) {\n        this.setState({\n          keyword\n        });\n      }\n    };\n\n    this.onSoft = (softBy, softValue) => {\n      this.setState({\n        softBy: softBy,\n        softValue: softValue\n      });\n    };\n\n    this.state = {\n      taskEditing: null,\n      filter: {\n        filterName: '',\n        filterStatus: -1\n      },\n      keyword: '',\n      softBy: 'name',\n      softValue: 1\n    };\n  } //Dữ liệu mẫu\n\n\n  render() {\n    var _this$state = this.state,\n        taskEditing = _this$state.taskEditing,\n        softBy = _this$state.softBy,\n        softValue = _this$state.softValue;\n    var isDisplayForm = this.props.isDisplayForm; // if(filter && filter.filterName){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(filter.filterName) !== -1\n    //   });\n    // }\n    // tasks = tasks.filter(task => {\n    //     if(filter.filterStatus === -1 ){\n    //       return task\n    //     }else{\n    //       return task.status === (filter.filterStatus === 1 ? true : false)\n    //     }  \n    // });\n    // if(keyword){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(keyword) !== -1\n    //   });\n    // }\n    //Soft\n    // if(softBy === 'name'){\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.namework.toUpperCase(); // bỏ qua hoa thường\n    //     var nameB = b.namework.toUpperCase(); // bỏ qua hoa thường\n    //     if (nameA < nameB) {\n    //       return -softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }else{\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.status;\n    //     var nameB = b.status; \n    //     if (nameA < nameB) {\n    //       return softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return -softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Qu\\u1EA3n l\\xFD c\\xF4ng vi\\u1EC7c\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: isDisplayForm ? \"4\" : \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: isDisplayForm ? \"8\" : \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: \"12\",\n      className: \"p-0 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Th\\xEAm c\\xF4ng vi\\u1EC7c\"), ' ', React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.createSampleData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"T\\u1EA1o d\\u1EEF li\\u1EC7u m\\u1EABu\"), ' '), React.createElement(Control, {\n      onSearch: this.onSearch,\n      onSoft: this.onSoft,\n      softBy: softBy,\n      softValue: softValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm\n  };\n};\n\nlet mapDispatchToProps = (dispatch, action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js"],"names":["React","Component","Alert","Container","Row","Col","Button","randomstring","TaskForm","Control","TaskList","connect","actions","App","constructor","props","createSampleData","tasks","id","generate","namework","status","localStorage","setItem","JSON","stringify","setState","onToggleForm","onFilter","filterName","filterStatus","parseInt","filter","toLowerCase","onSearch","keyword","onSoft","softBy","softValue","state","taskEditing","render","isDisplayForm","mapStateToProps","mapDispatchToProps","dispatch","action","toggleForm","onOpenForm","openForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Alert, Container, Row, Col, Button\n} from 'reactstrap';\nimport randomstring from 'randomstring';\n\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\n\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskEditing: null,\n      filter: {\n        filterName: '',\n        filterStatus: -1\n      },\n      keyword: '',\n      softBy: 'name',\n      softValue: 1\n    }\n  }\n\n  //Dữ liệu mẫu\n  createSampleData = () => {\n    let tasks = [\n      {\n        id: randomstring.generate(5),\n        namework: 'Học HTML',\n        status: true\n      },\n      {\n        id: randomstring.generate(5),\n        namework: 'Học CSS',\n        status: true\n      },\n      {\n        id: randomstring.generate(5),\n        namework: 'Học ReactJS Basic',\n        status: false\n      }\n    ];\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    this.setState({\n      tasks: tasks\n    });\n  }\n\n  //Đóng/mở form\n  onToggleForm  = () => {\n    this.props.onToggleForm();\n  }\n\n  //Filter\n  onFilter = (filterName, filterStatus) => {\n    let status = parseInt(filterStatus,10);\n    this.setState({\n      filter: {\n        filterName: filterName.toLowerCase(),\n        filterStatus : status\n      }\n    });\n  }\n  //Search\n  onSearch = (keyword) => {\n    if(keyword){\n      this.setState({\n        keyword\n      });\n    }\n\n  }\n  //Soft\n  onSoft = (softBy, softValue) => {\n    this.setState({\n          softBy: softBy,\n          softValue: softValue\n    });\n  }\n\n  render() {\n    var { \n      taskEditing, \n      // filter, \n      // keyword, \n      softBy, \n      softValue \n    } = this.state;\n\n    var { isDisplayForm } = this.props;\n    // if(filter && filter.filterName){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(filter.filterName) !== -1\n    //   });\n    // }\n\n    // tasks = tasks.filter(task => {\n    //     if(filter.filterStatus === -1 ){\n    //       return task\n    //     }else{\n    //       return task.status === (filter.filterStatus === 1 ? true : false)\n    //     }  \n    // });\n\n    // if(keyword){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(keyword) !== -1\n    //   });\n    // }\n    //Soft\n    // if(softBy === 'name'){\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.namework.toUpperCase(); // bỏ qua hoa thường\n    //     var nameB = b.namework.toUpperCase(); // bỏ qua hoa thường\n    //     if (nameA < nameB) {\n    //       return -softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }else{\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.status;\n    //     var nameB = b.status; \n    //     if (nameA < nameB) {\n    //       return softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return -softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }\n    return (\n      <div className=\"App\">\n        <Alert color=\"primary\">\n          <h1 className=\"title-app\">Quản lý công việc</h1>\n        </Alert>\n        <Container>\n          <Row>\n            <Col md={ isDisplayForm ? \"4\" : \"0\"}>\n              <TaskForm /> \n            </Col>\n            <Col md={ isDisplayForm ? \"8\" : \"12\" }>\n              <Col md=\"12\" className=\"p-0 mb-2\">\n                <Button color=\"primary\" onClick={ this.onToggleForm }>Thêm công việc</Button>{' '}\n                <Button color=\"danger\" onClick={this.createSampleData}>Tạo dữ liệu mẫu</Button>{' '}\n              </Col>\n              <Control \n                onSearch={this.onSearch}\n                onSoft={this.onSoft}\n                softBy={softBy}\n                softValue={softValue}\n              />\n              <TaskList\n                onFilter = {this.onFilter}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm\n  };\n};\n\nlet mapDispatchToProps = (dispatch,action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}