{"ast":null,"code":"import _objectSpread from \"/Users/su/Documents/LuyntoLearn/task-with-redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as types from './../constants/ActionTypes';\nimport randomstring from 'randomstring';\nlet data = JSON.parse(localStorage.getItem('tasks')); //Khai báo giá trị mặc định\n\nlet initialState = data ? data : []; // Các hàm\n//---Tìm index\n\nlet findIndex = (tasks, id) => {\n  let result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      return result = index;\n    }\n  });\n  return result;\n};\n\nlet id = '';\nlet index = -1; //Khởi tạo reducer\n\nlet myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      console.log(action); // Thêm task mới vào data  \n\n      let task = {\n        id: action.task.id,\n        namework: action.task.namework,\n        status: action.task.statuswork === 'true' ? true : false\n      };\n\n      if (!task.id) {\n        task.id = ram;\n        state.push(task);\n      } else {\n        index = findIndex(state, task.id);\n        state[index] = task;\n      }\n\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n\n      if (index !== -1) {\n        state[index] = _objectSpread({}, state[index], {\n          status: !state[index].status\n        });\n      }\n\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  } // return state;\n\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/reducers/tasks.js"],"names":["types","randomstring","data","JSON","parse","localStorage","getItem","initialState","findIndex","tasks","id","result","forEach","task","index","myReducer","state","action","type","LIST_ALL","SAVE_TASK","console","log","namework","status","statuswork","ram","push","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["import * as types from './../constants/ActionTypes';\nimport randomstring from 'randomstring';\n\nlet data = JSON.parse(localStorage.getItem('tasks'));\n//Khai báo giá trị mặc định\nlet initialState = data ? data : [];\n\n// Các hàm\n//---Tìm index\nlet  findIndex = (tasks, id) => {\n    let result = -1;\n    tasks.forEach( (task,index) => {\n      if(task.id === id){\n        return result = index; \n      }\n    });\n    return result;\n}\n\nlet id ='';\nlet index = -1;\n\n\n//Khởi tạo reducer\nlet myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.SAVE_TASK:\n            console.log(action);\n            // Thêm task mới vào data  \n            let task = {\n                id: action.task.id,\n                namework: action.task.namework,\n                status: action.task.statuswork === 'true' ? true : false\n            }\n            if(!task.id){\n                task.id = ram\n                state.push(task);\n            }else{\n                index = findIndex(state, task.id);\n                state[index] = task;\n            }\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS_TASK:\n            id = action.id;\n            index = findIndex(state, id);\n            if( index !== -1){\n                state[index] = {\n                    ...state[index],\n                    status: !state[index].status \n                }\n            }\n            localStorage.setItem('tasks',JSON.stringify(state));\n            return [...state];\n        case types.DELETE_TASK:\n            id = action.id;\n            index = findIndex(state, id);\n            state.splice(index, 1)\n            localStorage.setItem('tasks',JSON.stringify(state));\n            return [...state]\n        default:\n            return state;\n    }\n    // return state;\n};\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}