{"ast":null,"code":"var _jsxFileName = \"/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Alert, Container, Row, Col, Button } from 'reactstrap';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onToggleForm = () => {\n      if (this.props.task && this.props.task.id !== '') {\n        this.props.onOpenForm();\n      } else {\n        this.props.onToggleForm();\n      }\n\n      ;\n      this.props.onClearTask({\n        id: '',\n        name: '',\n        status: false\n      });\n    };\n\n    this.state = {\n      softBy: 'name',\n      softValue: 1\n    };\n  } //Đóng/mở form\n\n\n  render() {\n    var isDisplayForm = this.props.isDisplayForm;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Qu\\u1EA3n l\\xFD c\\xF4ng vi\\u1EC7c\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: isDisplayForm ? \"4\" : \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: isDisplayForm ? \"8\" : \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: \"12\",\n      className: \"p-0 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Th\\xEAm c\\xF4ng vi\\u1EC7c\")), React.createElement(Control, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    task: state.task\n  };\n};\n\nlet mapDispatchToProps = (dispatch, action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    },\n    onClearTask: task => {\n      dispatch(actions.editTask(task));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js"],"names":["React","Component","Alert","Container","Row","Col","Button","TaskForm","Control","TaskList","connect","actions","App","constructor","props","onToggleForm","task","id","onOpenForm","onClearTask","name","status","state","softBy","softValue","render","isDisplayForm","mapStateToProps","mapDispatchToProps","dispatch","action","toggleForm","openForm","editTask"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Alert, Container, Row, Col, Button\n} from 'reactstrap';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\n\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      softBy: 'name',\n      softValue: 1\n    }\n  }\n\n  //Đóng/mở form\n  onToggleForm  = () => {\n    if(this.props.task && this.props.task.id !== ''){\n      this.props.onOpenForm();\n    }else{\n      this.props.onToggleForm();\n    };\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      status: false\n    });\n  }\n\n  render() {\n    var { isDisplayForm } = this.props;\n    return (\n      <div className=\"App\">\n        <Alert color=\"primary\">\n          <h1 className=\"title-app\">Quản lý công việc</h1>\n        </Alert>\n        <Container>\n          <Row>\n            <Col md={ isDisplayForm ? \"4\" : \"0\"}>\n              <TaskForm /> \n            </Col>\n            <Col md={ isDisplayForm ? \"8\" : \"12\" }>\n              <Col md=\"12\" className=\"p-0 mb-2\">\n                <Button color=\"primary\" onClick={ this.onToggleForm }>Thêm công việc</Button>\n              </Col>\n              <Control/>\n              <TaskList />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    task: state.task\n  };\n};\n\nlet mapDispatchToProps = (dispatch,action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    },\n    onClearTask: (task) =>{\n      dispatch(actions.editTask(task));\n    }\n  };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}