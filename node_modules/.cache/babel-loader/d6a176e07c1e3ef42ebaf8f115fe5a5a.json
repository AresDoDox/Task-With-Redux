{"ast":null,"code":"import * as types from './../constants/ActionTypes';\nimport randomstring from 'randomstring';\nlet data = JSON.parse(localStorage.getItem('tasks')); //Khai báo giá trị mặc định\n\nlet initialState = data ? data : []; //Khởi tạo reducer\n\nlet myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      // Thêm task mới vào data    \n      let newTask = {\n        id: randomstring.generate(5),\n        namework: action.task.namework,\n        status: action.task.statuswork\n      };\n      state.push(newTask);\n      localStorage.getItem('task', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  } // return state;\n\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/reducers/tasks.js"],"names":["types","randomstring","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","id","generate","namework","task","status","statuswork","push","stringify"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX,C,CACA;;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC,C,CAEA;;AACA,IAAIM,SAAS,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKX,KAAK,CAACY,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKT,KAAK,CAACa,QAAX;AACI;AACA,UAAIC,OAAO,GAAG;AACVC,QAAAA,EAAE,EAAEd,YAAY,CAACe,QAAb,CAAsB,CAAtB,CADM;AAEVC,QAAAA,QAAQ,EAAEP,MAAM,CAACQ,IAAP,CAAYD,QAFZ;AAGVE,QAAAA,MAAM,EAAET,MAAM,CAACQ,IAAP,CAAYE;AAHV,OAAd;AAKAX,MAAAA,KAAK,CAACY,IAAN,CAAWP,OAAX;AACAT,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BH,IAAI,CAACmB,SAAL,CAAeb,KAAf,CAA7B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ;AACI,aAAOA,KAAP;AAdR,GAD8C,CAiB9C;;AACH,CAlBD;;AAoBA,eAAeD,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes';\nimport randomstring from 'randomstring';\n\nlet data = JSON.parse(localStorage.getItem('tasks'));\n//Khai báo giá trị mặc định\nlet initialState = data ? data : [];\n\n//Khởi tạo reducer\nlet myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            // Thêm task mới vào data    \n            let newTask = {\n                id: randomstring.generate(5),\n                namework: action.task.namework,\n                status: action.task.statuswork \n            }\n            state.push(newTask);\n            localStorage.getItem('task', JSON.stringify(state));\n            return [...state];\n        default:\n            return state;\n    }\n    // return state;\n};\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}