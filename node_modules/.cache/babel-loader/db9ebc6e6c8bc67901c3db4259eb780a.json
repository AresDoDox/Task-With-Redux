{"ast":null,"code":"var _jsxFileName = \"/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Alert, Container, Row, Col, Button } from 'reactstrap';\nimport randomstring from 'randomstring';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as action from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createSampleData = () => {\n      let tasks = [{\n        id: randomstring.generate(5),\n        namework: 'Học HTML',\n        status: true\n      }, {\n        id: randomstring.generate(5),\n        namework: 'Học CSS',\n        status: true\n      }, {\n        id: randomstring.generate(5),\n        namework: 'Học ReactJS Basic',\n        status: false\n      }];\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.onToggleForm = () => {\n      // if(this.state.isDisplayForm && this.state.taskEditing !== null ){\n      //   this.setState({\n      //     isDisplayForm: true,\n      //     taskEditing: null\n      //   });\n      // }else{\n      //   this.setState({\n      //     isDisplayForm: !this.state.isDisplayForm,\n      //     taskEditing: null\n      //   });\n      // }\n      this.props.onToggleForm();\n    };\n\n    this.onShowForm = () => {\n      this.setState({\n        isDisplayForm: true\n      });\n    };\n\n    this.onCloseForm = () => {\n      this.setState({\n        isDisplayForm: false,\n        taskEditing: null\n      });\n    };\n\n    this.editTask = id => {\n      this.onShowForm();\n      let tasks = this.state.tasks;\n      var index = this.findIndex(id);\n      var taskEditing = tasks[index];\n      this.setState({\n        taskEditing\n      });\n    };\n\n    this.onUpdateStatus = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n      }\n\n      this.setState({\n        tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n\n    this.onDelete = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n      tasks.splice(index, 1);\n      this.setState({\n        tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n\n    this.findIndex = id => {\n      var tasks = this.state.tasks;\n      let result = -1;\n      tasks.forEach((task, index) => {\n        if (task.id === id) {\n          return result = index;\n        }\n      });\n      return result;\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      let status = parseInt(filterStatus, 10);\n      this.setState({\n        filter: {\n          filterName: filterName.toLowerCase(),\n          filterStatus: status\n        }\n      });\n    };\n\n    this.onSearch = keyword => {\n      if (keyword) {\n        this.setState({\n          keyword\n        });\n      }\n    };\n\n    this.onSoft = (softBy, softValue) => {\n      this.setState({\n        softBy: softBy,\n        softValue: softValue\n      });\n    };\n\n    this.state = {\n      taskEditing: null,\n      filter: {\n        filterName: '',\n        filterStatus: -1\n      },\n      keyword: '',\n      softBy: 'name',\n      softValue: 1\n    };\n  } //Dữ liệu mẫu\n\n\n  render() {\n    var _this$state = this.state,\n        taskEditing = _this$state.taskEditing,\n        softBy = _this$state.softBy,\n        softValue = _this$state.softValue;\n    var isDisplayForm = this.props.isDisplayForm; // if(filter && filter.filterName){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(filter.filterName) !== -1\n    //   });\n    // }\n    // tasks = tasks.filter(task => {\n    //     if(filter.filterStatus === -1 ){\n    //       return task\n    //     }else{\n    //       return task.status === (filter.filterStatus === 1 ? true : false)\n    //     }  \n    // });\n    // if(keyword){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(keyword) !== -1\n    //   });\n    // }\n    //Soft\n    // if(softBy === 'name'){\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.namework.toUpperCase(); // bỏ qua hoa thường\n    //     var nameB = b.namework.toUpperCase(); // bỏ qua hoa thường\n    //     if (nameA < nameB) {\n    //       return -softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }else{\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.status;\n    //     var nameB = b.status; \n    //     if (nameA < nameB) {\n    //       return softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return -softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }\n\n    let elementTaskForm = isDisplayForm ? React.createElement(TaskForm, {\n      onSubmit: this.onSubmit,\n      onCloseForm: this.onCloseForm,\n      task: taskEditing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }) : '';\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Qu\\u1EA3n l\\xFD c\\xF4ng vi\\u1EC7c\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: isDisplayForm ? \"4\" : \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, elementTaskForm), React.createElement(Col, {\n      md: isDisplayForm ? \"8\" : \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: \"12\",\n      className: \"p-0 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Th\\xEAm c\\xF4ng vi\\u1EC7c\"), ' ', React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.createSampleData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"T\\u1EA1o d\\u1EEF li\\u1EC7u m\\u1EABu\"), ' '), React.createElement(Control, {\n      onSearch: this.onSearch,\n      onSoft: this.onSoft,\n      softBy: softBy,\n      softValue: softValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(TaskList // tasks={ tasks } \n    , {\n      editTask: this.editTask,\n      onUpdateStatus: this.onUpdateStatus,\n      onDelete: this.onDelete,\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {};\n};\n\nlet mapDispatchToProps = (dispatch, action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(action.toggleForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/su/Documents/LuyntoLearn/task-with-redux/src/App.js"],"names":["React","Component","Alert","Container","Row","Col","Button","randomstring","TaskForm","Control","TaskList","connect","action","App","constructor","props","createSampleData","tasks","id","generate","namework","status","localStorage","setItem","JSON","stringify","setState","onToggleForm","onShowForm","isDisplayForm","onCloseForm","taskEditing","editTask","state","index","findIndex","onUpdateStatus","onDelete","splice","result","forEach","task","onFilter","filterName","filterStatus","parseInt","filter","toLowerCase","onSearch","keyword","onSoft","softBy","softValue","render","elementTaskForm","onSubmit","mapStateToProps","mapDispatchToProps","dispatch","toggleForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Alert, Container, Row, Col, Button\n} from 'reactstrap';\nimport randomstring from 'randomstring';\n\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\n\nimport { connect } from 'react-redux';\nimport * as action from './actions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskEditing: null,\n      filter: {\n        filterName: '',\n        filterStatus: -1\n      },\n      keyword: '',\n      softBy: 'name',\n      softValue: 1\n    }\n  }\n\n  //Dữ liệu mẫu\n  createSampleData = () => {\n    let tasks = [\n      {\n        id: randomstring.generate(5),\n        namework: 'Học HTML',\n        status: true\n      },\n      {\n        id: randomstring.generate(5),\n        namework: 'Học CSS',\n        status: true\n      },\n      {\n        id: randomstring.generate(5),\n        namework: 'Học ReactJS Basic',\n        status: false\n      }\n    ];\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    this.setState({\n      tasks: tasks\n    });\n  }\n\n  //Đóng/mở form\n  onToggleForm  = () => {\n    // if(this.state.isDisplayForm && this.state.taskEditing !== null ){\n    //   this.setState({\n    //     isDisplayForm: true,\n    //     taskEditing: null\n    //   });\n    // }else{\n    //   this.setState({\n    //     isDisplayForm: !this.state.isDisplayForm,\n    //     taskEditing: null\n    //   });\n    // }\n    this.props.onToggleForm();\n  }\n\n  onShowForm = () => {\n    this.setState({\n      isDisplayForm: true\n    });\n  }\n  //Đóng Form\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false,\n      taskEditing: null\n    });\n  }\n\n  //Chỉnh sửa form\n  editTask = (id) => {\n    this.onShowForm();\n    let { tasks } = this.state;\n    var index = this.findIndex(id);\n    var taskEditing = tasks[index];\n    this.setState({\n      taskEditing\n    });\n\n    \n    \n  }\n\n  //Cập nhật status\n  onUpdateStatus = (id) => {\n    var { tasks } = this.state;\n    var index = this.findIndex(id);\n    if( index !== -1){\n      tasks[index].status = !tasks[index].status\n    }\n    this.setState({\n      tasks\n    });\n    localStorage.setItem('tasks',JSON.stringify(tasks));\n  }\n\n\n  //Xóa phần tử\n  onDelete = (id) => {\n    var { tasks } = this.state;\n    var index = this.findIndex(id);\n    tasks.splice(index, 1)\n    this.setState({\n      tasks\n    });\n    localStorage.setItem('tasks',JSON.stringify(tasks));\n  }\n\n  //Tìm index\n  findIndex = (id) => {\n    var { tasks } = this.state;\n    let result = -1;\n    tasks.forEach( (task,index) => {\n      if(task.id === id){\n        return result = index; \n      }\n    });\n    return result;\n  }\n\n  //Filter\n  onFilter = (filterName, filterStatus) => {\n    let status = parseInt(filterStatus,10);\n    this.setState({\n      filter: {\n        filterName: filterName.toLowerCase(),\n        filterStatus : status\n      }\n    });\n  }\n  //Search\n  onSearch = (keyword) => {\n    if(keyword){\n      this.setState({\n        keyword\n      });\n    }\n\n  }\n  //Soft\n  onSoft = (softBy, softValue) => {\n    this.setState({\n          softBy: softBy,\n          softValue: softValue\n    });\n  }\n\n  render() {\n    var { \n      taskEditing, \n      // filter, \n      // keyword, \n      softBy, \n      softValue \n    } = this.state;\n\n    var { isDisplayForm } = this.props;\n    // if(filter && filter.filterName){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(filter.filterName) !== -1\n    //   });\n    // }\n\n    // tasks = tasks.filter(task => {\n    //     if(filter.filterStatus === -1 ){\n    //       return task\n    //     }else{\n    //       return task.status === (filter.filterStatus === 1 ? true : false)\n    //     }  \n    // });\n\n    // if(keyword){\n    //   tasks = tasks.filter(task => {\n    //     return task.namework.toLowerCase().indexOf(keyword) !== -1\n    //   });\n    // }\n    //Soft\n    // if(softBy === 'name'){\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.namework.toUpperCase(); // bỏ qua hoa thường\n    //     var nameB = b.namework.toUpperCase(); // bỏ qua hoa thường\n    //     if (nameA < nameB) {\n    //       return -softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }else{\n    //   tasks = tasks.sort((a, b) => {\n    //     var nameA = a.status;\n    //     var nameB = b.status; \n    //     if (nameA < nameB) {\n    //       return softValue;\n    //     }\n    //     if (nameA > nameB) {\n    //       return -softValue  ;\n    //     }\n    //     // name trùng nhau\n    //     return 0;\n    //   });\n    // }\n\n    let elementTaskForm = isDisplayForm \n          ? <TaskForm  \n              onSubmit={ this.onSubmit } \n              onCloseForm={ this.onCloseForm }\n              task = {taskEditing}\n            /> \n          : '';\n    return (\n      <div className=\"App\">\n        <Alert color=\"primary\">\n          <h1 className=\"title-app\">Quản lý công việc</h1>\n        </Alert>\n        <Container>\n          <Row>\n            <Col md={ isDisplayForm ? \"4\" : \"0\"}>\n              { elementTaskForm }\n            </Col>\n            <Col md={ isDisplayForm ? \"8\" : \"12\" }>\n              <Col md=\"12\" className=\"p-0 mb-2\">\n                <Button color=\"primary\" onClick={ this.onToggleForm }>Thêm công việc</Button>{' '}\n                <Button color=\"danger\" onClick={this.createSampleData}>Tạo dữ liệu mẫu</Button>{' '}\n              </Col>\n              <Control \n                onSearch={this.onSearch}\n                onSoft={this.onSoft}\n                softBy={softBy}\n                softValue={softValue}\n              />\n              <TaskList \n                // tasks={ tasks } \n                editTask={this.editTask}\n                onUpdateStatus = {this.onUpdateStatus}\n                onDelete = {this.onDelete}\n                onFilter = {this.onFilter}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {};\n};\n\nlet mapDispatchToProps = (dispatch,action) => {\n  return {\n    onToggleForm: () => {\n      dispatch(action.toggleForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}